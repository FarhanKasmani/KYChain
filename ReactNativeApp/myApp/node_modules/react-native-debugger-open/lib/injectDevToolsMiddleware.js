'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.revert = exports.inject = undefined;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _es6Template = require('es6-template');

var _es6Template2 = _interopRequireDefault(_es6Template);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tmplPath = (0, _path.join)(__dirname, 'injectDevToolsMiddleware.tmpl.js');
var tmplPathInDev = (0, _path.join)(__dirname, '../lib/injectDevToolsMiddleware.tmpl.js');

var template = _fs2.default.readFileSync(_fs2.default.existsSync(tmplPath) ? tmplPath : tmplPathInDev, 'utf-8');

var name = 'react-native-debugger-patch';
var startFlag = `/* ${name} start */`;
var endFlag = `/* ${name} end */`;
var keyFunc = 'launchChromeDevTools';

var flags = {
  'react-native': {
    '0.50.0-rc.0': {
      target: 'react-native',
      dir: 'local-cli/server/middleware',
      file: 'getDevToolsMiddleware.js',
      func: `function ${keyFunc}(port, args = '') {`,
      replaceFunc: `function ${keyFunc}(port, args = '', skipRNDebugger) {`,
      funcCall: '(port, args, true)',
      args: "port + '&args=' + args"
    },
    '0.53.0': {
      target: 'react-native',
      dir: 'local-cli/server/middleware',
      file: 'getDevToolsMiddleware.js',
      func: `function ${keyFunc}(host, args = '') {`,
      replaceFunc: `function ${keyFunc}(host, args = '', skipRNDebugger) {`,
      funcCall: '(host, args, true)',
      args: "(host && host.split(':')[1] || '8081') + '&args=' + args"
    },
    '0.59.0-rc.0': {
      target: '@react-native-community/cli',
      dir: 'build/server/middleware',
      file: 'getDevToolsMiddleware.js',
      func: `function ${keyFunc}(host, port, args = '') {`,
      replaceFunc: `function ${keyFunc}(host, port, args = '', skipRNDebugger) {`,
      funcCall: '(host, port, args, true)',
      args: "(host && host.split(':')[1] || '8081') + '&args=' + args"
    }
  },
  'react-native-macos': {
    '0.0.0': {
      target: 'react-native-macos',
      dir: 'local-cli/server/middleware',
      file: 'getDevToolsMiddleware.js',
      func: `function ${keyFunc}(port) {`,
      replaceFunc: `function ${keyFunc}(port, skipRNDebugger) {`,
      funcCall: '(port, true)',
      args: 'port'
    }
  },
  // react-native
  default: {
    target: 'react-native',
    dir: 'local-cli/server/middleware',
    file: 'getDevToolsMiddleware.js',
    func: `function ${keyFunc}(port) {`,
    replaceFunc: `function ${keyFunc}(port, skipRNDebugger) {`,
    funcCall: '(port, true)',
    args: 'port'
  }
};

var getModuleInfo = function getModuleInfo(modulePath, moduleName) {
  var pkg = JSON.parse(_fs2.default.readFileSync((0, _path.join)(modulePath, moduleName, 'package.json'))); // eslint-disable-line
  return { version: pkg.version, name: pkg.name };
};

function getFlag(moduleName, version) {
  var list = flags[moduleName || 'react-native'] || {};
  var versions = Object.keys(list);
  var flag = flags.default;
  for (var i = 0; i < versions.length; i++) {
    if (_semver2.default.gte(version, versions[i])) {
      flag = list[versions[i]];
    }
  }
  return flag;
}

var inject = exports.inject = function inject(modulePath, moduleName) {
  var info = getModuleInfo(modulePath, moduleName);

  var _getFlag = getFlag(info.name, info.version),
      funcFlag = _getFlag.func,
      replaceFuncFlag = _getFlag.replaceFunc,
      funcCall = _getFlag.funcCall,
      args = _getFlag.args,
      target = _getFlag.target,
      dir = _getFlag.dir,
      file = _getFlag.file;

  var filePath = (0, _path.join)(modulePath, target, dir, file);
  if (!_fs2.default.existsSync(filePath)) return false;

  var code = (0, _es6Template2.default)(template, {
    startFlag,
    replaceFuncFlag,
    keyFunc,
    funcCall,
    endFlag,
    args
  });

  var middlewareCode = _fs2.default.readFileSync(filePath, 'utf-8');
  var start = middlewareCode.indexOf(startFlag); // already injected ?
  var end = middlewareCode.indexOf(endFlag) + endFlag.length;
  if (start === -1) {
    start = middlewareCode.indexOf(funcFlag);
    end = start + funcFlag.length;
  }
  _fs2.default.writeFileSync(filePath, middlewareCode.substr(0, start) + code + middlewareCode.substr(end, middlewareCode.length));
  return true;
};

var revert = exports.revert = function revert(modulePath, moduleName) {
  var info = getModuleInfo(modulePath, moduleName);

  var _getFlag2 = getFlag(info.name, info.version),
      funcFlag = _getFlag2.func,
      target = _getFlag2.target,
      dir = _getFlag2.dir,
      file = _getFlag2.file;

  var filePath = (0, _path.join)(modulePath, target, dir, file);
  if (!_fs2.default.existsSync(filePath)) return false;

  var middlewareCode = _fs2.default.readFileSync(filePath, 'utf-8');
  var start = middlewareCode.indexOf(startFlag); // already injected ?
  var end = middlewareCode.indexOf(endFlag) + endFlag.length;
  if (start !== -1) {
    _fs2.default.writeFileSync(filePath, middlewareCode.substr(0, start) + funcFlag + middlewareCode.substr(end, middlewareCode.length));
  }
  return true;
};