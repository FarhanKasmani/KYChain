'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _injectDevToolsMiddleware = require('./injectDevToolsMiddleware');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var modulePath = _path2.default.join(process.cwd(), 'node_modules');

var log = function log(pass, msg) {
  var prefix = pass ? _chalk2.default.green.bgBlack('PASS') : _chalk2.default.red.bgBlack('FAIL');
  var color = pass ? _chalk2.default.blue : _chalk2.default.red;
  console.log(prefix, color(msg));
};

exports.default = function (argv, cb) {
  var moduleName = void 0;
  if (argv.macos) {
    moduleName = 'react-native-macos';
  } else {
    moduleName = 'react-native';
  }

  // Revert injection
  if (argv.revert) {
    var passMiddleware = (0, _injectDevToolsMiddleware.revert)(modulePath, moduleName);
    var msg = 'Revert injection of React Native Debugger from React Native packager';
    log(passMiddleware, msg + (!passMiddleware ? ', the file inject file not found.' : '.'));
    return cb(passMiddleware);
  }

  var inject = function inject() {
    var pass = (0, _injectDevToolsMiddleware.inject)(modulePath, moduleName);
    var msg = 'Replace `open debugger-ui with Chrome` to `open React Native Debugger`';
    log(pass, msg + (pass ? '.' : ', the file inject file not found.'));
    cb(pass);
  };

  if (process.platform !== 'darwin') {
    inject();
  } else {
    var cwd = '/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/'; // eslint-disable-line
    var lsregisterPath = 'lsregister';
    if (!_fs2.default.existsSync(cwd + lsregisterPath)) return inject();

    _child_process2.default.exec(`./${lsregisterPath} -dump | grep rndebugger:`, { cwd }, function (err, stdout) {
      if (stdout.length === 0) {
        log(false, '[RNDebugger] The `rndebugger://` URI scheme seems not registered, ' + "maybe you haven't install the app? " + 'Run `brew update && brew cask install react-native-debugger` ' + 'or download from https://github.com/jhen0409/react-native-debugger/releases ' + 'then open it to register the URI scheme.');
      }
      inject();
    });
  }
};